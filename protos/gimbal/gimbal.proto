syntax = "proto3";

package mavsdk.rpc.gimbal;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.gimbal";
option java_outer_classname = "GimbalProto";

// Provide control over a gimbal.
service GimbalService {

    /*
     * Set gimbal roll, pitch and yaw angles.
     *
     * This sets the desired roll, pitch and yaw angles of a gimbal.
     * Will return when the command is accepted, however, it might
     * take the gimbal longer to actually be set to the new angles.
     *
     * Note that the roll angle needs to be set to 0 when send_mode is Once.
     */
    rpc SetAngles(SetAnglesRequest) returns(SetAnglesResponse) {}

    /*
     * Set gimbal angular rates.
     *
     * This sets the desired angular rates around roll, pitch and yaw axes of a gimbal.
     * Will return when the command is accepted, however, it might
     * take the gimbal longer to actually reach the angular rate.
     *
     * Note that the roll angle needs to be set to 0 when send_mode is Once.
     */
    rpc SetAngularRates(SetAngularRatesRequest) returns(SetAngularRatesResponse) {}

    /*
     * Set gimbal region of interest (ROI).
     *
     * This sets a region of interest that the gimbal will point to.
     * The gimbal will continue to point to the specified region until it
     * receives a new command.
     * The function will return when the command is accepted, however, it might
     * take the gimbal longer to actually rotate to the ROI.
     */
     rpc SetRoiLocation(SetRoiLocationRequest) returns(SetRoiLocationResponse) {}

     /*
      * Take control.
      *
      * There can be only two components in control of a gimbal at any given time.
      * One with "primary" control, and one with "secondary" control. The way the
      * secondary control is implemented is not specified and hence depends on the
      * vehicle.
      *
      * Components are expected to be cooperative, which means that they can
      * override each other and should therefore do it carefully.
      */
     rpc TakeControl(TakeControlRequest) returns(TakeControlResponse) {}

     /*
      * Release control.
      *
      * Release control, such that other components can control the gimbal.
      */
     rpc ReleaseControl(ReleaseControlRequest) returns(ReleaseControlResponse) {}

     /*
      * Subscribe to list of gimbals.
      *
      * This allows to find out what gimbals are connected to the system.
      * Based on the gimbal ID, we can then address a specific gimbal.
      */
     rpc SubscribeGimbalList(SubscribeGimbalListRequest) returns(stream GimbalListResponse) {}

     /*
      * Subscribe to control status updates.
      *
      * This allows a component to know if it has primary, secondary or
      * no control over the gimbal. Also, it gives the system and component ids
      * of the other components in control (if any).
      */
     rpc SubscribeControlStatus(SubscribeControlStatusRequest) returns(stream ControlStatusResponse) { option (mavsdk.options.async_type) = ASYNC; }

     /*
      * Get control status for specific gimbal.
      */
     rpc GetControlStatus(GetControlStatusRequest) returns (GetControlStatusResponse) { option (mavsdk.options.async_type) = SYNC; }

     /*
      * Subscribe to attitude updates.
      *
      * This gets you the gimbal's attitude and angular rate.
      */
     rpc SubscribeAttitude(SubscribeAttitudeRequest) returns(stream AttitudeResponse) { option (mavsdk.options.async_type) = ASYNC; }

     /*
      * Get attitude for specific gimbal.
      */
     rpc GetAttitude(GetAttitudeRequest) returns (GetAttitudeResponse) { option (mavsdk.options.async_type) = SYNC; }
}

message SetAnglesRequest {
    int32 gimbal_id = 1; // Gimbal id to address (0 for all gimbals)
    float roll_deg = 2; // Roll angle in degrees (negative down on the right)
    float pitch_deg = 3; // Pitch angle in degrees (negative points down)
    float yaw_deg = 4; // Yaw angle in degrees (positive is clock-wise, range: -180 to 180 or 0 to 360)
    GimbalMode gimbal_mode = 5; // Gimbal mode to use
    SendMode send_mode = 6; // Send mode of command/setpoint
}
message SetAnglesResponse {
    GimbalResult gimbal_result = 1;
}

message SetAngularRatesRequest {
    int32 gimbal_id = 1; // Gimbal id to address (0 for all gimbals)
    float roll_rate_deg_s = 2; // Angular rate around roll axis in degrees/second (negative down on the right)
    float pitch_rate_deg_s = 3; // Angular rate around pitch axis in degrees/second (negative downward)
    float yaw_rate_deg_s = 4; // Angular rate around yaw axis in degrees/second (positive is clock-wise)
    GimbalMode gimbal_mode = 5; // Gimbal mode to use
    SendMode send_mode = 6; // Send mode of command/setpoint
}
message SetAngularRatesResponse {
    GimbalResult gimbal_result = 1;
}

message SetRoiLocationRequest {
    int32 gimbal_id = 1; // Gimbal id to address (0 for all gimbals)
    double latitude_deg = 2; // Latitude in degrees
    double longitude_deg = 3; // Longitude in degrees
    float altitude_m = 4; // Altitude in metres (AMSL)
}
message SetRoiLocationResponse {
    GimbalResult gimbal_result = 1;
}

message TakeControlRequest {
    int32 gimbal_id = 1; // Gimbal id to address (0 for all gimbals)
    ControlMode control_mode = 2; // Control mode (primary or secondary)
}
message TakeControlResponse {
    GimbalResult gimbal_result = 1;
}

message ReleaseControlRequest {
    int32 gimbal_id = 1; // Gimbal id to address (0 for all gimbals)
}
message ReleaseControlResponse {
    GimbalResult gimbal_result = 1;
}

message SubscribeControlStatusRequest {}
message ControlStatusResponse {
    ControlStatus control_status = 1; // Control status
}

message GetControlStatusRequest {
    int32 gimbal_id = 1; // Gimbal ID
}
message GetControlStatusResponse {
    GimbalResult gimbal_result = 1;
    ControlStatus control_status = 2; // Control status
}

/*
 * Quaternion type.
 *
 * All rotations and axis systems follow the right-hand rule.
 * The Hamilton quaternion product definition is used.
 * A zero-rotation quaternion is represented by (1,0,0,0).
 * The quaternion could also be written as w + xi + yj + zk.
 *
 * For more info see: https://en.wikipedia.org/wiki/Quaternion
 */
message Quaternion {
    float w = 1 [(mavsdk.options.default_value)="NaN"]; // Quaternion entry 0, also denoted as a
    float x = 2 [(mavsdk.options.default_value)="NaN"]; // Quaternion entry 1, also denoted as b
    float y = 3 [(mavsdk.options.default_value)="NaN"]; // Quaternion entry 2, also denoted as c
    float z = 4 [(mavsdk.options.default_value)="NaN"]; // Quaternion entry 3, also denoted as d
}

/*
 * Euler angle type.
 *
 * All rotations and axis systems follow the right-hand rule.
 * The Euler angles are converted using the 3-1-2 sequence instead of standard 3-2-1 in order
 * to avoid the gimbal lock at 90 degrees down.
 *
 * For more info see https://en.wikipedia.org/wiki/Euler_angles
 */
message EulerAngle {
    float roll_deg = 1 [(mavsdk.options.default_value)="NaN"]; // Roll angle in degrees, positive is banking to the right
    float pitch_deg = 2 [(mavsdk.options.default_value)="NaN"]; // Pitch angle in degrees, positive is pitching nose up
    float yaw_deg = 3 [(mavsdk.options.default_value)="NaN"]; // Yaw angle in degrees, positive is clock-wise seen from above
}

// Gimbal angular rate type
message AngularVelocityBody {
    float roll_rad_s = 1 [(mavsdk.options.default_value)="NaN"]; // Roll angular velocity
    float pitch_rad_s = 2 [(mavsdk.options.default_value)="NaN"]; // Pitch angular velocity
    float yaw_rad_s = 3 [(mavsdk.options.default_value)="NaN"]; // Yaw angular velocity
}

// Gimbal attitude type
message Attitude {
    int32 gimbal_id = 1; // Gimbal ID
    EulerAngle euler_angle_forward = 2; // Euler angle relative to forward
    Quaternion quaternion_forward = 3; // Quaternion relative to forward
    EulerAngle euler_angle_north = 4; // Euler angle relative to North
    Quaternion quaternion_north = 5; // Quaternion relative to North
    AngularVelocityBody angular_velocity = 6; // The angular rate
    uint64 timestamp_us = 7; // Timestamp in microseconds
}

message SubscribeAttitudeRequest {}
message AttitudeResponse {
    Attitude attitude = 1; // The attitude
}

message GetAttitudeRequest {
    int32 gimbal_id = 1; // Gimbal ID
}
message GetAttitudeResponse {
    GimbalResult gimbal_result = 1;
    Attitude attitude = 2; // The attitude
}

message SubscribeGimbalListRequest {}
message GimbalListResponse {
    GimbalList gimbal_list = 1; // Gimbal list
}

// Gimbal mode type.
enum GimbalMode {
    GIMBAL_MODE_YAW_FOLLOW = 0; // Yaw follow will point the gimbal to the vehicle heading
    GIMBAL_MODE_YAW_LOCK = 1; // Yaw lock will fix the gimbal pointing to an absolute direction
}

// Control mode
enum ControlMode {
    CONTROL_MODE_NONE = 0; // Indicates that the component does not have control over the gimbal
    CONTROL_MODE_PRIMARY = 1; // To take primary control over the gimbal
    CONTROL_MODE_SECONDARY = 2; // To take secondary control over the gimbal
}

enum SendMode {
    SEND_MODE_ONCE = 0; // Send command exactly once with quality of service (use for sporadic commands slower than 1 Hz)
    SEND_MODE_STREAM = 1; // Stream setpoint without quality of service (use for setpoints faster than 1 Hz).
}

// Gimbal list item
message GimbalItem {
    int32 gimbal_id = 1; // ID to address it, starting at 1 (0 means all gimbals)
    string vendor_name = 2; // Vendor name
    string model_name = 3; // Model name
    string custom_name = 4; // Custom name name
    int32 gimbal_manager_component_id = 5; // MAVLink component of gimbal manager, for debugging purposes
    int32 gimbal_device_id = 6; // MAVLink component of gimbal device
}

// Gimbal list
message GimbalList {
    repeated GimbalItem gimbals = 1; // Gimbal item.
}


// Control status
message ControlStatus {
    int32 gimbal_id = 1; // Gimbal ID
    ControlMode control_mode = 2; // Control mode (none, primary or secondary)
    int32 sysid_primary_control = 3; // Sysid of the component that has primary control over the gimbal (0 if no one is in control)
    int32 compid_primary_control = 4; // Compid of the component that has primary control over the gimbal (0 if no one is in control)
    int32 sysid_secondary_control = 5; // Sysid of the component that has secondary control over the gimbal (0 if no one is in control)
    int32 compid_secondary_control = 6; // Compid of the component that has secondary control over the gimbal (0 if no one is in control)
}

// Result type.
message GimbalResult {
    // Possible results returned for gimbal commands.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Command was accepted
        RESULT_ERROR = 2; // Error occurred sending the command
        RESULT_TIMEOUT = 3; // Command timed out
        RESULT_UNSUPPORTED = 4; // Functionality not supported
        RESULT_NO_SYSTEM = 5; // No system connected
        RESULT_INVALID_ARGUMENT = 6; // Invalid argument
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
