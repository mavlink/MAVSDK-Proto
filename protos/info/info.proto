syntax = "proto3";

package mavsdk.rpc.info;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.info";
option java_outer_classname = "InfoProto";

// Provide information about the hardware and/or software of a system.
service InfoService {
    // Get flight information of the system.
    rpc GetFlightInformation(GetFlightInformationRequest) returns(GetFlightInformationResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Get the identification of the system.
    rpc GetIdentification(GetIdentificationRequest) returns(GetIdentificationResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Get product information of the system.
    rpc GetProduct(GetProductRequest) returns(GetProductResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Get the version information of the system.
    rpc GetVersion(GetVersionRequest) returns(GetVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Get the speed factor of a simulation (with lockstep a simulation can run faster or slower than realtime).
    rpc GetSpeedFactor(GetSpeedFactorRequest) returns(GetSpeedFactorResponse) { option (mavsdk.options.async_type) = SYNC; }

    // Subscribe to 'flight information' updates.
    rpc SubscribeFlightInformation(SubscribeFlightInformationRequest) returns(stream FlightInformationResponse) { option (mavsdk.options.async_type) = ASYNC; }
}

message GetFlightInformationRequest {}
message GetFlightInformationResponse {
    InfoResult info_result = 1;
    FlightInfo flight_info = 2; // Flight information of the system
}

message GetIdentificationRequest {}
message GetIdentificationResponse {
    InfoResult info_result = 1;
    Identification identification = 2; // Identification of the system
}

message GetProductRequest {}
message GetProductResponse {
    InfoResult info_result = 1;
    Product product = 2; // Product information of the system
}

message GetVersionRequest {}
message GetVersionResponse {
    InfoResult info_result = 1;
    Version version = 2; // Version information about the system
}

message GetSpeedFactorRequest {}
message GetSpeedFactorResponse {
    InfoResult info_result = 1;
    double speed_factor = 2; // Speed factor of simulation
}

message SubscribeFlightInformationRequest {}
message FlightInformationResponse {
    FlightInfo flight_info = 1; // The next flight information
}

// System flight information.
message FlightInfo {
    uint32 time_boot_ms = 1; // Time since system boot
    uint64 flight_uid = 2; // Flight counter. Starts from zero, is incremented at every disarm and is never reset (even after reboot)
    uint32 duration_since_arming_ms = 3; // Duration since arming in milliseconds
    uint32 duration_since_takeoff_ms = 4; // Duration since takeoff in milliseconds
}

// System identification.
message Identification {
    string hardware_uid = 1; // UID of the hardware. This refers to uid2 of MAVLink. If the system does not support uid2 yet, this is all zeros.
    uint64 legacy_uid = 2; // Legacy UID of the hardware, referred to as uid in MAVLink (formerly exposed during system discovery as UUID).
}

// System product information.
message Product {
    int32 vendor_id = 1; // ID of the board vendor
    string vendor_name = 2; // Name of the vendor
    int32 product_id = 3; // ID of the product
    string product_name = 4; // Name of the product
}

// System version information.
message Version {
    // These values define the type of firmware/flight software release
    enum FlightSoftwareVersionType {
        FLIGHT_SOFTWARE_VERSION_TYPE_UNKNOWN = 0; // Unknown type
        FLIGHT_SOFTWARE_VERSION_TYPE_DEV = 1; // Development release
        FLIGHT_SOFTWARE_VERSION_TYPE_ALPHA = 2; // Alpha release
        FLIGHT_SOFTWARE_VERSION_TYPE_BETA = 3; // Beta release
        FLIGHT_SOFTWARE_VERSION_TYPE_RC  = 4; // Release candidate
        FLIGHT_SOFTWARE_VERSION_TYPE_RELEASE = 5; // Official stable release
    }

    int32 flight_sw_major = 1; // Flight software major version
    int32 flight_sw_minor = 2; // Flight software minor version
    int32 flight_sw_patch = 3; // Flight software patch version
    int32 flight_sw_vendor_major = 4; // Flight software vendor major version
    int32 flight_sw_vendor_minor = 5; // Flight software vendor minor version
    int32 flight_sw_vendor_patch = 6; // Flight software vendor patch version
    int32 os_sw_major = 7; // Operating system software major version
    int32 os_sw_minor = 8; // Operating system software minor version
    int32 os_sw_patch = 9; // Operating system software patch version
    string flight_sw_git_hash = 10; // Flight software git hash
    string os_sw_git_hash = 11; // Operating system software git hash
    FlightSoftwareVersionType flight_sw_version_type = 12; // Flight software version type
}

// Result type.
message InfoResult {
    // Possible results returned for info requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_INFORMATION_NOT_RECEIVED_YET = 2; // Information has not been received yet
        RESULT_NO_SYSTEM = 3; // No system is connected
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
