syntax = "proto3";

package mavsdk.rpc.landing_target;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.landing_target";
option java_outer_classname = "LandingTargetProto";

/*
 * Allows developers to stream the position of a landing target for the drone to land on.
 */
service LandingTargetService {
    // Publish landing target measurement recorded by a sensor onboard the drone
    rpc PublishPositionRelative(PublishPositionRelativeRequest) returns(PublishPositionRelativeResponse) { option (mavsdk.options.async_type) = SYNC; }
}

// Position type in sensor frame coordinates
message PositionLocal {
    float x = 1; // Coordinate of landing target
    float y = 2; // Coordinate of landing target
    float z = 3; // Coordinate of landing target
}

// message PositionGlobal {
//     uint32 latitude = 1;
//     uint32 longitude = 2;
// }

message PublishPositionRelativeRequest {
    PositionLocal position_local = 1; // The next landing position
}

message PublishPositionRelativeResponse {
    LandingTargetResult landing_target_result = 1;
}

// Target Observation Frame type.
// enum ObservationFrame {
//     OBSERVATION_FRAME_LOCAL_NED = 0;        // NED local tangent frame (x: North, y: East, z: Down) with origin fixed relative to earth.
//     OBSERVATION_FRAME_BODY_FRD = 1;         // FRD local frame aligned to the vehicle's attitude (x: Forward, y: Right, z: Down) with an origin that travels with vehicle.
//     OBSERVATION_FRAME_LOCAL_OFFSET_NED = 2; // NED local tangent frame (x: North, y: East, z: Down) with an origin that travels with vehicle.
// }

// Result type.
message LandingTargetResult {
    // Possible results returned for LandingTarget publish requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Success
        RESULT_NO_SYSTEM = 2; // No system is connected
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}