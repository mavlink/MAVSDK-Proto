syntax = "proto3";

package mavsdk.rpc.mission_raw;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.mission_raw";
option java_outer_classname = "MissionRawProto";

// Enable raw missions as exposed by MAVLink.
service MissionRawService {
    /*
     * Upload a list of raw mission items to the system.
     *
     * The raw mission items are uploaded to a drone. Once uploaded the mission
     * can be started and executed even if the connection is lost.
     */
    rpc UploadMission(UploadMissionRequest) returns(UploadMissionResponse) {}
    /*
     * Upload a list of geofence items to the system.
     */
    rpc UploadGeofence(UploadGeofenceRequest) returns(UploadGeofenceResponse) {}
    /*
     * Upload a list of rally point items to the system.
     */
    rpc UploadRallyPoints(UploadRallyPointsRequest) returns(UploadRallyPointsResponse) {}
    /*
     * Cancel an ongoing mission upload.
     */
    rpc CancelMissionUpload(CancelMissionUploadRequest) returns(CancelMissionUploadResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Download a list of raw mission items from the system (asynchronous).
     */
    rpc DownloadMission(DownloadMissionRequest) returns(DownloadMissionResponse) {}    
    /*
     * Download a list of raw geofence items from the system (asynchronous).
     */
    rpc DownloadGeofence(DownloadGeofenceRequest) returns(DownloadGeofenceResponse) {}
        /*
     * Download a list of raw rallypoint items from the system (asynchronous).
     */
     rpc DownloadRallypoints(DownloadRallypointsRequest) returns(DownloadRallypointsResponse) {}
    /*
     * Cancel an ongoing mission download.
     */
    rpc CancelMissionDownload(CancelMissionDownloadRequest) returns(CancelMissionDownloadResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Start the mission.
     *
     * A mission must be uploaded to the vehicle before this can be called.
     */
    rpc StartMission(StartMissionRequest) returns(StartMissionResponse) {}
    /*
     * Pause the mission.
     *
     * Pausing the mission puts the vehicle into
     * [HOLD mode](https://docs.px4.io/en/flight_modes/hold.html).
     * A multicopter should just hover at the spot while a fixedwing vehicle should loiter
     * around the location where it paused.
     */
    rpc PauseMission(PauseMissionRequest) returns(PauseMissionResponse) {}
    /*
     * Clear the mission saved on the vehicle.
     */
    rpc ClearMission(ClearMissionRequest) returns(ClearMissionResponse) {}
    /*
     * Sets the raw mission item index to go to.
     *
     * By setting the current index to 0, the mission is restarted from the beginning. If it is set
     * to a specific index of a raw mission item, the mission will be set to this item.
     */
    rpc SetCurrentMissionItem(SetCurrentMissionItemRequest) returns(SetCurrentMissionItemResponse) {}
    /*
     * Subscribe to mission progress updates.
     */
    rpc SubscribeMissionProgress(SubscribeMissionProgressRequest) returns(stream MissionProgressResponse) {}
    /*
     * Subscribes to mission changed.
     *
     * This notification can be used to be informed if a ground station has
     * been uploaded or changed by a ground station or companion computer.
     *
     * @param callback Callback to notify about change.
     */
    rpc SubscribeMissionChanged(SubscribeMissionChangedRequest) returns(stream MissionChangedResponse) { option (mavsdk.options.async_type) = ASYNC; }
    /*
     * Import a QGroundControl missions in JSON .plan format, from a file.
     *
     * Supported:
     * - Waypoints
     * - Survey
     * Not supported:
     * - Structure Scan
     */
    rpc ImportQgroundcontrolMission(ImportQgroundcontrolMissionRequest) returns(ImportQgroundcontrolMissionResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Import a QGroundControl missions in JSON .plan format, from a string.
     *
     * Supported:
     * - Waypoints
     * - Survey
     * Not supported:
     * - Structure Scan
     */
    rpc ImportQgroundcontrolMissionFromString(ImportQgroundcontrolMissionFromStringRequest) returns(ImportQgroundcontrolMissionFromStringResponse) { option (mavsdk.options.async_type) = SYNC; }
}

message UploadMissionRequest {
    repeated MissionItem mission_items = 1; // The mission items
}
message UploadMissionResponse {
    MissionRawResult mission_raw_result = 1;
}

message UploadGeofenceRequest {
    repeated MissionItem mission_items = 1; // The mission items
}
message UploadGeofenceResponse {
    MissionRawResult mission_raw_result = 1;
}

message UploadRallyPointsRequest {
    repeated MissionItem mission_items = 1; // The mission items
}
message UploadRallyPointsResponse {
    MissionRawResult mission_raw_result = 1;
}

message CancelMissionUploadRequest {}
message CancelMissionUploadResponse {
    MissionRawResult mission_raw_result = 1;
}

message DownloadMissionRequest {}
message DownloadMissionResponse {
    MissionRawResult mission_raw_result = 1;
    repeated MissionItem mission_items = 2; // The mission items
}

message DownloadGeofenceRequest {}
message DownloadGeofenceResponse {
    MissionRawResult mission_raw_result = 1;
    repeated MissionItem geofence_items = 2; // The geofence items
}

message DownloadRallypointsRequest {}
message DownloadRallypointsResponse {
    MissionRawResult mission_raw_result = 1;
    repeated MissionItem rallypoint_items = 2; // The rallypoint items
}

message CancelMissionDownloadRequest {}
message CancelMissionDownloadResponse {
    MissionRawResult mission_raw_result = 1;
}

message StartMissionRequest {}
message StartMissionResponse {
    MissionRawResult mission_raw_result = 1;
}

message PauseMissionRequest {}
message PauseMissionResponse {
    MissionRawResult mission_raw_result = 1;
}

message ClearMissionRequest {}
message ClearMissionResponse {
    MissionRawResult mission_raw_result = 1;
}

message SetCurrentMissionItemRequest {
    int32 index = 1; // Index of the mission item to be set as the next one (0-based)
}
message SetCurrentMissionItemResponse {
    MissionRawResult mission_raw_result = 1;
}

message SubscribeMissionProgressRequest {}
message MissionProgressResponse {
    MissionProgress mission_progress = 1; // Mission progress
}

message SubscribeMissionChangedRequest {}
message MissionChangedResponse {
    bool mission_changed = 1; // Mission has changed
}

message ImportQgroundcontrolMissionRequest {
    string qgc_plan_path = 1; // File path of the QGC plan
}
message ImportQgroundcontrolMissionResponse {
    MissionRawResult mission_raw_result = 1;
    MissionImportData mission_import_data = 2; // The imported mission data
}

message ImportQgroundcontrolMissionFromStringRequest {
    string qgc_plan = 1; // QGC plan as string
}
message ImportQgroundcontrolMissionFromStringResponse {
    MissionRawResult mission_raw_result = 1;
    MissionImportData mission_import_data = 2; // The imported mission data
}

// Mission progress type.
message MissionProgress {
    int32 current = 1; // Current mission item index (0-based), if equal to total, the mission is finished
    int32 total = 2; // Total number of mission items
}

// Mission item exactly identical to MAVLink MISSION_ITEM_INT.
message MissionItem {
    uint32 seq = 1; // Sequence (uint16_t)
    uint32 frame = 2; // The coordinate system of the waypoint (actually uint8_t)
    uint32 command = 3; // The scheduled action for the waypoint (actually uint16_t)
    uint32 current = 4; // false:0, true:1 (actually uint8_t)
    uint32 autocontinue = 5; // Autocontinue to next waypoint (actually uint8_t)
    float param1 = 6; // PARAM1, see MAV_CMD enum
    float param2 = 7; // PARAM2, see MAV_CMD enum
    float param3 = 8; // PARAM3, see MAV_CMD enum
    float param4 = 9; // PARAM4, see MAV_CMD enum
    int32 x = 10; // PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
    int32 y = 11; // PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
    float z = 12; // PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame)
    uint32 mission_type = 13; // Mission type (actually uint8_t)
}

// Mission import data
message MissionImportData {
    repeated MissionItem mission_items = 1; // Mission items
    repeated MissionItem geofence_items = 2; // Geofence items
    repeated MissionItem rally_items = 3; // Rally items
}

// Result type.
message MissionRawResult {
    // Possible results returned for action requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_ERROR = 2; // Error
        RESULT_TOO_MANY_MISSION_ITEMS = 3; // Too many mission items in the mission
        RESULT_BUSY = 4; // Vehicle is busy
        RESULT_TIMEOUT = 5; // Request timed out
        RESULT_INVALID_ARGUMENT = 6; // Invalid argument
        RESULT_UNSUPPORTED = 7; // Mission downloaded from the system is not supported
        RESULT_NO_MISSION_AVAILABLE = 8; // No mission available on the system
        RESULT_TRANSFER_CANCELLED = 9; // Mission transfer (upload or download) has been cancelled
        RESULT_FAILED_TO_OPEN_QGC_PLAN = 10; // Failed to open the QGroundControl plan
        RESULT_FAILED_TO_PARSE_QGC_PLAN = 11; // Failed to parse the QGroundControl plan
        RESULT_NO_SYSTEM = 12; // No system connected
        RESULT_DENIED = 13; // Request denied
        RESULT_MISSION_TYPE_NOT_CONSISTENT = 14; // Mission type is not consistent
        RESULT_INVALID_SEQUENCE = 15; // The mission item sequences are not increasing correctly
        RESULT_CURRENT_INVALID = 16; // The current item is not set correctly
        RESULT_PROTOCOL_ERROR = 17; // There was a protocol error
        RESULT_INT_MESSAGES_NOT_SUPPORTED = 18; // The system does not support the MISSION_INT protocol
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
