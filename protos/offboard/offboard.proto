syntax = "proto3";

package mavsdk.rpc.offboard;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.offboard";
option java_outer_classname = "OffboardProto";

/**
 * Control a drone with position, velocity, attitude or motor commands.
 *
 * The module is called offboard because the commands can be sent from external sources
 * as opposed to onboard control right inside the autopilot "board".
 *
 * Client code must specify a setpoint before starting offboard mode.
 * Mavsdk automatically sends setpoints at 20Hz (PX4 Offboard mode requires that setpoints
 * are minimally sent at 2Hz).
 */
service OffboardService {
    /*
     * Start offboard control.
     */
    rpc Start(StartRequest) returns(StartResponse) {}
    /*
     * Stop offboard control.
     *
     * The vehicle will be put into Hold mode: https://docs.px4.io/en/flight_modes/hold.html
     */
    rpc Stop(StopRequest) returns(StopResponse) {}
    /*
     * Check if offboard control is active.
     *
     * True means that the vehicle is in offboard mode and we are actively sending
     * setpoints.
     */
    rpc IsActive(IsActiveRequest) returns(IsActiveResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set the attitude in terms of roll, pitch and yaw in degrees with thrust.
     */
    rpc SetAttitude(SetAttitudeRequest) returns(SetAttitudeResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set direct actuator control values to groups #0 and #1.
     *
     * First 8 controls will go to control group 0, the following 8 controls to control group 1 (if
     * actuator_control.num_controls more than 8).
     */
    rpc SetActuatorControl(SetActuatorControlRequest) returns(SetActuatorControlResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set the attitude rate in terms of pitch, roll and yaw angular rate along with thrust.
     */
    rpc SetAttitudeRate(SetAttitudeRateRequest) returns(SetAttitudeRateResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set the position in NED coordinates and yaw.
     */
    rpc SetPositionNed(SetPositionNedRequest) returns(SetPositionNedResponse) { option (mavsdk.options.async_type) = SYNC; }
     /*
     * Set the position in Global coordinates (latitude, longitude, altitude) and yaw
     */
    rpc SetPositionGlobal(SetPositionGlobalRequest) returns(SetPositionGlobalResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set the velocity in body coordinates and yaw angular rate. Not available for fixed-wing aircraft.
     */
    rpc SetVelocityBody(SetVelocityBodyRequest) returns(SetVelocityBodyResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Set the velocity in NED coordinates and yaw. Not available for fixed-wing aircraft.
     */
    rpc SetVelocityNed(SetVelocityNedRequest) returns(SetVelocityNedResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
    * Set the position in NED coordinates, with the velocity to be used as feed-forward.
    */
    rpc SetPositionVelocityNed(SetPositionVelocityNedRequest) returns(SetPositionVelocityNedResponse) { option (mavsdk.options.async_type) = SYNC; }

    /*
    * Set the position, velocity and acceleration in NED coordinates, with velocity and acceleration used as feed-forward.
    */
    rpc SetPositionVelocityAccelerationNed(SetPositionVelocityAccelerationNedRequest) returns(SetPositionVelocityAccelerationNedResponse) { option (mavsdk.options.async_type) = SYNC; }

    /*
    * Set the acceleration in NED coordinates.
    */
    rpc SetAccelerationNed(SetAccelerationNedRequest) returns(SetAccelerationNedResponse) { option (mavsdk.options.async_type) = SYNC; }
}

message StartRequest {}
message StartResponse {
    OffboardResult offboard_result = 1;
}

message StopRequest {}
message StopResponse {
    OffboardResult offboard_result = 1;
}

message IsActiveRequest {}
message IsActiveResponse {
    bool is_active = 1; // True if offboard is active
}

message SetAttitudeRequest {
    Attitude attitude = 1; // Attitude roll, pitch and yaw along with thrust
}
message SetAttitudeResponse {
    OffboardResult offboard_result = 1;
};

message SetActuatorControlRequest {
    ActuatorControl actuator_control = 1; // Actuator control values
}
message SetActuatorControlResponse {
    OffboardResult offboard_result = 1;
};

message SetAttitudeRateRequest {
    AttitudeRate attitude_rate = 1; // Attitude rate roll, pitch and yaw angular rate along with thrust
}
message SetAttitudeRateResponse {
    OffboardResult offboard_result = 1;
}

message SetPositionNedRequest {
    PositionNedYaw position_ned_yaw = 1; // Position and yaw
}
message SetPositionNedResponse {
    OffboardResult offboard_result = 1;
}

message SetPositionGlobalRequest {
    PositionGlobalYaw position_global_yaw = 1; // Position and yaw
}
message SetPositionGlobalResponse {
    OffboardResult offboard_result = 1;
}

message SetVelocityBodyRequest {
    VelocityBodyYawspeed velocity_body_yawspeed = 1; // Velocity and yaw angular rate
}
message SetVelocityBodyResponse {
    OffboardResult offboard_result = 1;
}

message SetVelocityNedRequest {
    VelocityNedYaw velocity_ned_yaw = 1; // Velocity and yaw
}
message SetVelocityNedResponse {
    OffboardResult offboard_result = 1;
}

message SetPositionVelocityNedRequest {
    PositionNedYaw position_ned_yaw = 1; // Position and yaw
    VelocityNedYaw velocity_ned_yaw = 2; // Velocity and yaw
}

message SetPositionVelocityAccelerationNedRequest {
    PositionNedYaw position_ned_yaw = 1; // Position and yaw
    VelocityNedYaw velocity_ned_yaw = 2; // Velocity and yaw
    AccelerationNed acceleration_ned = 3; // Acceleration
}

message SetPositionVelocityNedResponse {
    OffboardResult offboard_result = 1;
}

message SetPositionVelocityAccelerationNedResponse {
    OffboardResult offboard_result = 1;
}

message SetAccelerationNedRequest {
    AccelerationNed acceleration_ned = 1; // Acceleration
}
message SetAccelerationNedResponse {
    OffboardResult offboard_result = 1;
}

// Type for attitude body angles in NED reference frame (roll, pitch, yaw and thrust)
message Attitude {
    float roll_deg = 1; // Roll angle (in degrees, positive is right side down)
    float pitch_deg = 2; // Pitch angle (in degrees, positive is nose up)
    float yaw_deg = 3; // Yaw angle (in degrees, positive is move nose to the right)
    float thrust_value = 4; // Thrust (range: 0 to 1)
}

/*
 * Eight controls that will be given to the group. Each control is a normalized
 * (-1..+1) command value, which will be mapped and scaled through the mixer.
 */
message ActuatorControlGroup {
    repeated float controls = 1; // Controls in the group
}

/*
 * Type for actuator control.
 *
 * Control members should be normed to -1..+1 where 0 is neutral position.
 * Throttle for single rotation direction motors is 0..1, negative range for reverse direction.
 *
 * One group support eight controls.
 *
 * Up to 16 actuator controls can be set. To ignore an output group, set all it controls to NaN.
 * If one or more controls in group is not NaN, then all NaN controls will sent as zero.
 * The first 8 actuator controls internally map to control group 0, the latter 8 actuator
 * controls map to control group 1. Depending on what controls are set (instead of NaN) 1 or 2
 * MAVLink messages are actually sent.
 *
 * In PX4 v1.9.0 Only first four Control Groups are supported
 * (https://github.com/PX4/Firmware/blob/v1.9.0/src/modules/mavlink/mavlink_receiver.cpp#L980).
 */
message ActuatorControl {
    repeated ActuatorControlGroup groups = 1; // Control groups.
}

// Type for attitude rate commands in body coordinates (roll, pitch, yaw angular rate and thrust)
message AttitudeRate {
    float roll_deg_s = 1; // Roll angular rate (in degrees/second, positive for clock-wise looking from front)
    float pitch_deg_s = 2; // Pitch angular rate (in degrees/second, positive for head/front moving up)
    float yaw_deg_s = 3; // Yaw angular rate (in degrees/second, positive for clock-wise looking from above)
    float thrust_value = 4; // Thrust (range: 0 to 1)
}

// Type for position commands in NED (North East Down) coordinates and yaw.
message PositionNedYaw {
    float north_m = 1; // Position North (in metres)
    float east_m = 2; // Position East (in metres)
    float down_m = 3; // Position Down (in metres)
    float yaw_deg = 4; // Yaw in degrees (0 North, positive is clock-wise looking from above)
}

// Type for position commands in Global (Latitude, Longitude, Altitude) coordinates and yaw.
message PositionGlobalYaw {
    // Possible altitude options
    enum AltitudeType {
        ALTITUDE_TYPE_REL_HOME = 0; // Altitude relative to the Home position
        ALTITUDE_TYPE_AMSL = 1; // Altitude above mean sea level (AMSL)
        ALTITUDE_TYPE_AGL = 2; // Altitude above ground level (AGL)
    }
    double lat_deg = 1; // Latitude (in degrees)
    double lon_deg = 2; // Longitude (in degrees)
    float alt_m = 3;    // altitude (in metres)
    float yaw_deg = 4;  // Yaw in degrees (0 North, positive is clock-wise looking from above)
    AltitudeType altitude_type = 5; // altitude type for this position
}

// Type for velocity commands in body coordinates.
message VelocityBodyYawspeed {
    float forward_m_s = 1; // Velocity forward (in metres/second)
    float right_m_s = 2; // Velocity right (in metres/second)
    float down_m_s = 3; // Velocity down (in metres/second)
    float yawspeed_deg_s = 4; // Yaw angular rate (in degrees/second, positive for clock-wise looking from above)
}

// Type for velocity commands in NED (North East Down) coordinates and yaw.
message VelocityNedYaw {
    float north_m_s = 1; // Velocity North (in metres/second)
    float east_m_s = 2; // Velocity East (in metres/second)
    float down_m_s = 3; // Velocity Down (in metres/second)
    float yaw_deg = 4; // Yaw in degrees (0 North, positive is clock-wise looking from above)
}

// Type for acceleration commands in NED (North East Down) coordinates.
message AccelerationNed {
    float north_m_s2 = 1; // Acceleration North (in metres/second^2)
    float east_m_s2 = 2; // Acceleration East (in metres/second^2)
    float down_m_s2 = 3; // Acceleration Down (in metres/second^2)
}

// Result type.
message OffboardResult {
    // Possible results returned for offboard requests
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_NO_SYSTEM = 2; // No system is connected
        RESULT_CONNECTION_ERROR = 3; // Connection error
        RESULT_BUSY = 4; // Vehicle is busy
        RESULT_COMMAND_DENIED = 5; // Command denied
        RESULT_TIMEOUT = 6; // Request timed out
        RESULT_NO_SETPOINT_SET = 7; // Cannot start without setpoint set
        RESULT_FAILED = 8; // Request failed
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
