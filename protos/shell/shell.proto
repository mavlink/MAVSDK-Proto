syntax = "proto3";

package mavsdk.rpc.shell;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.shell";
option java_outer_classname = "ShellProto";

/*
 * Allow to communicate with the vehicle's system shell.
 */
service ShellService {
    /*
     * Send a command line.
     */
    rpc Send(SendRequest) returns(SendResponse) { option (mavsdk.options.async_type) = SYNC; }
    /*
     * Receive feedback from a sent command line.
     *
     * This subscription needs to be made before a command line is sent, otherwise, no response will be sent.
     */
    rpc SubscribeReceive(SubscribeReceiveRequest) returns(stream ReceiveResponse) { option (mavsdk.options.async_type) = ASYNC; }
}

message SendRequest {
    string command = 1; // The command line to send
}
message SendResponse {
    ShellResult shell_result = 1;
}

message SubscribeReceiveRequest {}
message ReceiveResponse {
    string data = 1; // Received data.
}

// Result type.
message ShellResult {
    // Possible results returned for shell requests
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_NO_SYSTEM = 2; // No system is connected
        RESULT_CONNECTION_ERROR = 3; // Connection error
        RESULT_NO_RESPONSE = 4; // Response was not received
        RESULT_BUSY = 5; // Shell busy (transfer in progress)
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
